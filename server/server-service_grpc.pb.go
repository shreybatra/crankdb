// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	cql "github.com/shreybatra/crankdb/cql"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrankDBClient is the client API for CrankDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrankDBClient interface {
	Set(ctx context.Context, in *cql.DataPacket, opts ...grpc.CallOption) (*cql.SetCommandResponse, error)
	Get(ctx context.Context, in *cql.GetCommandRequest, opts ...grpc.CallOption) (*cql.DataPacket, error)
	Find(ctx context.Context, in *cql.FindCommandRequest, opts ...grpc.CallOption) (CrankDB_FindClient, error)
}

type crankDBClient struct {
	cc grpc.ClientConnInterface
}

func NewCrankDBClient(cc grpc.ClientConnInterface) CrankDBClient {
	return &crankDBClient{cc}
}

func (c *crankDBClient) Set(ctx context.Context, in *cql.DataPacket, opts ...grpc.CallOption) (*cql.SetCommandResponse, error) {
	out := new(cql.SetCommandResponse)
	err := c.cc.Invoke(ctx, "/server.CrankDB/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crankDBClient) Get(ctx context.Context, in *cql.GetCommandRequest, opts ...grpc.CallOption) (*cql.DataPacket, error) {
	out := new(cql.DataPacket)
	err := c.cc.Invoke(ctx, "/server.CrankDB/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crankDBClient) Find(ctx context.Context, in *cql.FindCommandRequest, opts ...grpc.CallOption) (CrankDB_FindClient, error) {
	stream, err := c.cc.NewStream(ctx, &CrankDB_ServiceDesc.Streams[0], "/server.CrankDB/Find", opts...)
	if err != nil {
		return nil, err
	}
	x := &crankDBFindClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrankDB_FindClient interface {
	Recv() (*cql.DataPacket, error)
	grpc.ClientStream
}

type crankDBFindClient struct {
	grpc.ClientStream
}

func (x *crankDBFindClient) Recv() (*cql.DataPacket, error) {
	m := new(cql.DataPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CrankDBServer is the server API for CrankDB service.
// All implementations must embed UnimplementedCrankDBServer
// for forward compatibility
type CrankDBServer interface {
	Set(context.Context, *cql.DataPacket) (*cql.SetCommandResponse, error)
	Get(context.Context, *cql.GetCommandRequest) (*cql.DataPacket, error)
	Find(*cql.FindCommandRequest, CrankDB_FindServer) error
	mustEmbedUnimplementedCrankDBServer()
}

// UnimplementedCrankDBServer must be embedded to have forward compatible implementations.
type UnimplementedCrankDBServer struct {
}

func (UnimplementedCrankDBServer) Set(context.Context, *cql.DataPacket) (*cql.SetCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedCrankDBServer) Get(context.Context, *cql.GetCommandRequest) (*cql.DataPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCrankDBServer) Find(*cql.FindCommandRequest, CrankDB_FindServer) error {
	return status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedCrankDBServer) mustEmbedUnimplementedCrankDBServer() {}

// UnsafeCrankDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrankDBServer will
// result in compilation errors.
type UnsafeCrankDBServer interface {
	mustEmbedUnimplementedCrankDBServer()
}

func RegisterCrankDBServer(s grpc.ServiceRegistrar, srv CrankDBServer) {
	s.RegisterService(&CrankDB_ServiceDesc, srv)
}

func _CrankDB_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cql.DataPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrankDBServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CrankDB/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrankDBServer).Set(ctx, req.(*cql.DataPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrankDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cql.GetCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrankDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CrankDB/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrankDBServer).Get(ctx, req.(*cql.GetCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrankDB_Find_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(cql.FindCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrankDBServer).Find(m, &crankDBFindServer{stream})
}

type CrankDB_FindServer interface {
	Send(*cql.DataPacket) error
	grpc.ServerStream
}

type crankDBFindServer struct {
	grpc.ServerStream
}

func (x *crankDBFindServer) Send(m *cql.DataPacket) error {
	return x.ServerStream.SendMsg(m)
}

// CrankDB_ServiceDesc is the grpc.ServiceDesc for CrankDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrankDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.CrankDB",
	HandlerType: (*CrankDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _CrankDB_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CrankDB_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Find",
			Handler:       _CrankDB_Find_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/server-service.proto",
}
